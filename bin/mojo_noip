#!perl

use Mojo::Base -strict;
use Mojo::IOLoop;
use Mojo::WebService::NoIP;

use Getopt::Long;

my $args = {};

GetOptions($args, 'username=s', 'password=s', 'hostname=s', 'myip=s', 'offline', 'verbose');

my $noip = do {
  my %const;
  @const{qw/username password/} = delete @{$args}{qw/username password/};
  Mojo::WebService::NoIP->new(\%const);
};

my $command = shift || 'update';

__PACKAGE__->can($command)->();

sub ensure {
  my $delay = Mojo::IOLoop->delay;
  my $ua = $noip->ua;

  # check the current ip of the desired hostname, prevent redirection
  my $tx = $ua->build_tx( GET => $args->{hostname} );
  $tx->res->on(finish => sub { $_[0]->code(200) if $_[0]->is_status_class(300) });
  $ua->start($tx => $delay->begin);

  # check the current value of ourself unless one has been specified
  # this uses the noip portchecktool.com site
  if ($args->{myip}) {
    $delay->pass($args->{myip});
  } else {
    $ua->get('www.portchecktool.com' => $delay->begin);
  }

  $delay->on( finish => sub {
    my ($delay, $host, $myip) = @_;

    my $host_ip = $host->remote_address;
    say "Host IP: $host_ip" if $args->{verbose};

    my $real_ip = ref $myip ? $myip->res->dom->at('#input-ip')->{value} : $myip;
    say "My IP:   $real_ip" if $args->{verbose};

    update() unless $host_ip eq $real_ip;
  });
  $delay->wait;
}

sub update {
  say $noip->update($args)->res->body;
}

